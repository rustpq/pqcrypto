extern crate cc;
extern crate glob;

use std::env;
use std::path::{Path, PathBuf};

{% set globals = namespace() %}
{% set globals.x86_aes = False %}
{% set globals.x86_avx2 = False %}
{% set globals.aarch64_neon = False %}

{% for implementation in implementations %}
macro_rules! build_{{ implementation }} {
    ($variant:expr) => {
        let internals_include_path = &std::env::var("DEP_PQCRYPTO_INTERNALS_INCLUDEPATH").unwrap();
        let common_dir = Path::new("pqclean/common");

        let mut builder = cc::Build::new();
        let target_dir: PathBuf = ["pqclean", "crypto_{{ type }}", $variant, "{{ implementation }}"]
            .iter()
            .collect();

        let target_os = env::var("CARGO_CFG_TARGET_OS").unwrap();
        if target_os == "wasi" {
            let wasi_sdk_path = &std::env::var("WASI_SDK_DIR").expect("missing environment variable: WASI_SDK_DIR");
            builder.flag(format!("--sysroot={}", wasi_sdk_path).as_str());
        }

        {% if implementation == 'avx2' or implementation == 'avx' %}
        {% set globals.x86_avx2 = True %}
        let scheme_files = glob::glob(target_dir.join("*.[csS]").to_str().unwrap()).unwrap();
        let target_env = env::var("CARGO_CFG_TARGET_ENV").unwrap();
        if target_env == "msvc" {
            builder.flag("/arch:AVX2");
        } else {
            builder
                .flag("-mavx2")
                .flag("-mbmi2")
                .flag("-mbmi")
                .flag("-maes")
                .flag("-mpopcnt")
                .flag("-mpclmul");
        }
        {% elif implementation == 'aesni' %}
        {% set globals.x86_aes = True %}
        let scheme_files = glob::glob(target_dir.join("*.[csS]").to_str().unwrap()).unwrap();
        let target_env = env::var("CARGO_CFG_TARGET_ENV").unwrap();
        if target_env == "msvc" {
            builder.flag("/arch:AVX2");
        } else {
            builder
                .flag("-maes");
        }
        {% elif implementation == 'aarch64' %}
        {% set globals.aarch64_neon = True %}
        let scheme_files = glob::glob(target_dir.join("*.[csS]").to_str().unwrap()).unwrap();
        builder.flag("-march=armv8-a");
        {% else %}
        let scheme_files = glob::glob(target_dir.join("*.c").to_str().unwrap()).unwrap();
        {% endif %}

        builder
            .include(internals_include_path)
            .include(&common_dir)
            .include(target_dir)
            .files(
                scheme_files
                    .into_iter()
                    .map(|p| p.unwrap().to_string_lossy().into_owned()),
            );
        builder.compile(format!("{}_{{ implementation }}", $variant).as_str());
    };
}

{% endfor %}

fn main() {
    #[allow(unused_variables)]
    let aes_enabled = env::var("CARGO_FEATURE_AES").is_ok();
    #[allow(unused_variables)]
    let avx2_enabled = env::var("CARGO_FEATURE_AVX2").is_ok();
    #[allow(unused_variables)]
    let neon_enabled = env::var("CARGO_FEATURE_NEON").is_ok();
    #[allow(unused_variables)]
    let target_arch = env::var("CARGO_CFG_TARGET_ARCH").unwrap();
    #[allow(unused_variables)]
    let target_os = env::var("CARGO_CFG_TARGET_OS").unwrap();
    #[allow(unused_variables)]
    let is_windows = target_os == "windows";
    #[allow(unused_variables)]
    let is_macos = target_os == "macos";

    {% for scheme in schemes %}
    {% for implementation in scheme.implementations %}
    {% if implementation == 'avx2' or implementation == 'avx' %}
    if {{ x86_avx2_guard }} {
        build_{{ implementation }}!("{{ scheme.name }}");
    }
    {% elif implementation == 'aesni' %}
    if {{ x86_aes_guard }} {
        build_{{ implementation }}!("{{ scheme.name }}");
    }
    {% elif implementation == 'aarch64' %}
    if {{ aarch64_neon_guard }} {
        build_{{ implementation }}!("{{ scheme.name }}");
    }
    {% else %}
    build_{{ implementation }}!("{{ scheme.name }}");
    {% endif %}
    {% endfor %}
    {% endfor %}

    {% if globals.x86_avx2 %}
    if {{ x86_avx2_guard }} {
        // Print enableing flag for AVX2 implementation
        println!("cargo:rustc-cfg=enable_x86_avx2");
    }
    {% endif %}
    {% if globals.x86_aes %}
    if {{ x86_aes_guard }} {
        // Print enableing flag for AES implementation
        println!("cargo:rustc-cfg=enable_x86_aes");
    }
    {% endif %}
    {% if globals.aarch64_neon %}
    if {{ aarch64_neon_guard }} {
        // Print enableing flag for AARCH64 implementation
        println!("cargo:rustc-cfg=enable_aarch64_neon");
    }
    {% endif %}
}
