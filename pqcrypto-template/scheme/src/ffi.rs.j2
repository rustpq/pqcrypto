//! Foreign function interfaces
//!
//! This module defines the foreign function interface for the following
//! crypto implementations from PQClean:
//!
{% for scheme in schemes %}//!  * {{ scheme.name }}
{% endfor %}
// This file has been generated from PQClean.
// Find the templates in pqcrypto-template
use libc::c_int;

// ensures we link correctly
#[allow(unused_imports)]
use pqcrypto_internals::*;

{% for scheme in schemes %}
{% set metadata = metadatas[scheme.name] %}
{% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
{% set implementation_data = metadata['implementations']|selectattr('name', 'eq', implementation)|first %}
{% set NS_NAME = [scheme.name|namespaceize, implementation|namespaceize]|join('_') %}
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES: usize = {{ metadata['length-secret-key'] }};
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES: usize = {{ metadata['length-public-key'] }};
{% if type == "kem" %}
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_CIPHERTEXTBYTES: usize = {{ metadata['length-ciphertext'] }};
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES: usize = {{ metadata['length-shared-secret'] }};
{% else %}
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES: usize = {{ metadata['length-signature'] }};
{% endif %}
{% endfor %}
{% if 'avx2_implementation' in scheme %}
{% set implementation = scheme.avx2_implementation %}
{% set implementation_data = metadata['implementations']|selectattr('name', 'eq', implementation)|first %}
{% set NS_NAME = [scheme.name|namespaceize, implementation|namespaceize]|join('_') %}
#[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES: usize = {{ metadata['length-secret-key'] }};
#[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES: usize = {{ metadata['length-public-key'] }};
{% if type == "kem" %}
#[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_CIPHERTEXTBYTES: usize = {{ metadata['length-ciphertext'] }};
#[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES: usize = {{ metadata['length-shared-secret'] }};
{% else %}
#[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES: usize = {{ metadata['length-signature'] }};
{% endif %}
{% endif %}
{% endfor %}

{% for scheme in schemes %}
{% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
#[link(name = "{{ scheme.name }}_{{ implementation }}")]
extern "C" {
{% set NS_NAME = [scheme.name|namespaceize, implementation|namespaceize]|join('_') %}
{% if type == "kem" %}
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_keypair(pk: *mut u8, sk: *mut u8) -> c_int;
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_enc(ct: *mut u8, ss: *mut u8, pk: *const u8) -> c_int;
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_dec(
        ss: *mut u8,
        ct: *const u8,
        sk: *const u8,
    ) -> c_int;
{% else %}
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign_keypair(pk: *mut u8, sk: *mut u8) -> c_int;
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign(sm: *mut u8, smlen: *mut usize, msg: *const u8, len: usize, sk: *const u8) -> c_int;
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign_open(m: *mut u8, mlen: *mut usize, sm: *const u8, smlen: usize, pk: *const u8) -> c_int;
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign_signature(sig: *mut u8, siglen: *mut usize, m: *const u8, mlen: usize, sk: *const u8) -> c_int;
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign_verify(sig: *const u8, siglen: usize, m: *const u8, mlen: usize, pk: *const u8) -> c_int;
{% endif %}
}
{% endfor %}

{# AVX2 variants #}
{% if 'avx2_implementation' in scheme %}
#[cfg(enable_avx2)]
#[link(name = "{{ scheme.name }}_{{ scheme.avx2_implementation }}")]
extern "C" {
    {% set NS_NAME = [scheme.name|namespaceize, scheme.avx2_implementation|namespaceize]|join('_') %}
    {% if type == "kem" %}
    #[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_keypair(pk: *mut u8, sk: *mut u8) -> c_int;

    #[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_enc(ct: *mut u8, ss: *mut u8, pk: *const u8) -> c_int;

    #[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_dec(
        ss: *mut u8,
        ct: *const u8,
        sk: *const u8,
    ) -> c_int;
    {% else %}
    #[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign_keypair(pk: *mut u8, sk: *mut u8) -> c_int;
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    #[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign(sm: *mut u8, smlen: *mut usize, msg: *const u8, len: usize, sk: *const u8) -> c_int;
    #[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign_open(m: *mut u8, mlen: *mut usize, sm: *const u8, smlen: usize, pk: *const u8) -> c_int;
    #[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign_signature(sig: *mut u8, siglen: *mut usize, m: *const u8, mlen: usize, sk: *const u8) -> c_int;
    #[cfg(enable_avx2)]
{% if insecure %}
#[deprecated(note = "Insecure cryptography, do not use in production")]
{% endif %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_sign_verify(sig: *const u8, siglen: usize, m: *const u8, mlen: usize, pk: *const u8) -> c_int;
    {% endif %}
}
{% endif %}
{% endfor %}

{% for scheme in schemes %}
{% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
{% set NS_NAME = [scheme.name|namespaceize, implementation|namespaceize]|join('_') %}
#[cfg(test)]
mod test_{{ scheme.name|nameize }}_{{ implementation|nameize }} {
    use super::*;
    use alloc::vec;
{% if type == "sign" %}
    use alloc::vec::Vec;
    use rand::prelude::*;
{% endif %}

    {% if type == "kem" %}
    #[test]
    fn test_ffi() {
        unsafe {
            let mut pk = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES];
            let mut sk = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES];
            let mut ct = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_CIPHERTEXTBYTES];
            let mut ss1 = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES];
            let mut ss2 = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES];

            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_kem_keypair(pk.as_mut_ptr(), sk.as_mut_ptr())
            );
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_kem_enc(
                    ct.as_mut_ptr(),
                    ss1.as_mut_ptr(),
                    pk.as_ptr()
                )
            );
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_kem_dec(ss2.as_mut_ptr(), ct.as_ptr(), sk.as_ptr())
            );
            assert_eq!(&ss1[..], &ss2[..], "Shared secrets should be equal");
        }
    }
    {% endif %}

    {% if type == "sign" %}
    #[test]
    fn test_ffi() {
        unsafe {
            let mut rng = rand::thread_rng();
            let mut mlen: usize = rng.gen::<u16>() as usize;
            let msg: Vec<u8> = (0..mlen).map(|_| rng.gen()).collect();

            let mut pk = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES];
            let mut sk = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES];
            let mut pk_alt = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES];
            let mut sk_alt = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES];
            let mut detached_sig = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES];
            let mut sm = Vec::with_capacity(mlen + PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES);
            let mut smlen = 0;
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_sign_keypair(pk.as_mut_ptr(), sk.as_mut_ptr())
            );
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_sign(
                    sm.as_mut_ptr(), &mut smlen as *mut usize,
                    msg.as_ptr(), mlen, sk.as_ptr())
            );
            sm.set_len(smlen);

            let mut unpacked_m = Vec::with_capacity(mlen + PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES);
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_sign_open(
                    unpacked_m.as_mut_ptr(), &mut mlen as *mut usize,
                    sm.as_ptr(), sm.len(),
                    pk.as_ptr()
                )
            );
            unpacked_m.set_len(mlen);
            assert_eq!(unpacked_m, msg);

            // check verification fails with wrong pk
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_sign_keypair(pk_alt.as_mut_ptr(), sk_alt.as_mut_ptr())
            );
            assert!(
                PQCLEAN_{{ NS_NAME }}_crypto_sign_open(
                    unpacked_m.as_mut_ptr(), &mut mlen as *mut usize,
                    sm.as_ptr(), sm.len(),
                    pk_alt.as_ptr()
                ) < 0
            );

            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_sign_signature(
                    detached_sig.as_mut_ptr(), &mut smlen as *mut usize,
                    msg.as_ptr(), msg.len(),
                    sk.as_ptr())
            );
            assert!(smlen <= PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES,
                    "Signed message length should be ≤ CRYPTO_BYTES");
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_sign_verify(
                    detached_sig.as_ptr(), smlen,
                    msg.as_ptr(), msg.len(),
                    pk.as_ptr())
            );
            assert!(
                PQCLEAN_{{ NS_NAME }}_crypto_sign_verify(
                    detached_sig.as_ptr(), smlen,
                    msg.as_ptr(), msg.len(),
                    pk_alt.as_ptr()) < 0
            );

            assert!(
                PQCLEAN_{{ NS_NAME }}_crypto_sign_verify(
                    detached_sig.as_ptr(), smlen,
                    msg.as_ptr(), msg.len()-1,
                    pk.as_ptr()) < 0
            );
        }
    }
    {% endif %}
}
{% endfor %}
{% if 'avx2_implementation' in scheme %}
{% set implementation = scheme.avx2_implementation %}
{% set NS_NAME = [scheme.name|namespaceize, implementation|namespaceize]|join('_') %}
#[cfg(all(test, enable_avx2, feature = "avx2"))]
mod test_{{ scheme.name|nameize }}_{{ implementation|nameize }} {
    use super::*;
    use alloc::vec;
    use std::is_x86_feature_detected;
{% if type == "sign" %}
    use alloc::vec::Vec;
    use rand::prelude::*;
{% endif %}

    {% if type == "kem" %}
    #[test]
    fn test_ffi() {
        if !is_x86_feature_detected!("{{ scheme.avx2_feature }}") {
            return;
        }
        unsafe { run_test_ffi(); }
    }

    #[target_feature(enable = "{{ scheme.avx2_feature }}")]
    unsafe fn run_test_ffi() {
        let mut pk = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES];
        let mut sk = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES];
        let mut ct = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_CIPHERTEXTBYTES];
        let mut ss1 = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES];
        let mut ss2 = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES];

        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_kem_keypair(pk.as_mut_ptr(), sk.as_mut_ptr())
        );
        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_kem_enc(
                ct.as_mut_ptr(),
                ss1.as_mut_ptr(),
                pk.as_ptr()
            )
        );
        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_kem_dec(ss2.as_mut_ptr(), ct.as_ptr(), sk.as_ptr())
        );
        assert_eq!(&ss1[..], &ss2[..], "Shared secrets should be equal");
    }
    {% endif %}

    {% if type == "sign" %}
    #[test]
    fn test_ffi() {
        if !is_x86_feature_detected!("{{ scheme.avx2_feature }}") {
            return;
        }
        unsafe { run_test_ffi() };
    }

    #[target_feature(enable = "{{ scheme.avx2_feature }}")]
    unsafe fn run_test_ffi() {
        let mut rng = rand::thread_rng();
        let mut mlen: usize = rng.gen::<u16>() as usize;
        let msg: Vec<u8> = (0..mlen).map(|_| rng.gen()).collect();

        let mut pk = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES];
        let mut sk = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES];
        let mut pk_alt = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES];
        let mut sk_alt = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES];
        let mut detached_sig = vec![0u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES];
        let mut sm = Vec::with_capacity(mlen + PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES);
        let mut smlen = 0;
        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_sign_keypair(pk.as_mut_ptr(), sk.as_mut_ptr())
        );
        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_sign(
                sm.as_mut_ptr(), &mut smlen as *mut usize,
                msg.as_ptr(), mlen, sk.as_ptr())
        );
        sm.set_len(smlen);

        let mut unpacked_m = Vec::with_capacity(mlen + PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES);
        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_sign_open(
                unpacked_m.as_mut_ptr(), &mut mlen as *mut usize,
                sm.as_ptr(), sm.len(),
                pk.as_ptr()
            )
        );
        unpacked_m.set_len(mlen);
        assert_eq!(unpacked_m, msg);

        // check verification fails with wrong pk
        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_sign_keypair(pk_alt.as_mut_ptr(), sk_alt.as_mut_ptr())
        );
        assert_eq!(
            -1,
            PQCLEAN_{{ NS_NAME }}_crypto_sign_open(
                unpacked_m.as_mut_ptr(), &mut mlen as *mut usize,
                sm.as_ptr(), sm.len(),
                pk_alt.as_ptr()
            )
        );

        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_sign_signature(
                detached_sig.as_mut_ptr(), &mut smlen as *mut usize,
                msg.as_ptr(), msg.len(),
                sk.as_ptr())
        );
        assert!(smlen <= PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES,
                "Signed message length should be ≤ CRYPTO_BYTES");
        assert_eq!(
            0,
            PQCLEAN_{{ NS_NAME }}_crypto_sign_verify(
                detached_sig.as_ptr(), smlen,
                msg.as_ptr(), msg.len(),
                pk.as_ptr())
        );
        assert_eq!(
            -1,
            PQCLEAN_{{ NS_NAME }}_crypto_sign_verify(
                detached_sig.as_ptr(), smlen,
                msg.as_ptr(), msg.len(),
                pk_alt.as_ptr())
        );

        assert_eq!(
            -1,
            PQCLEAN_{{ NS_NAME }}_crypto_sign_verify(
                detached_sig.as_ptr(), smlen,
                msg.as_ptr(), msg.len()-1,
                pk.as_ptr())
        );
    }
    {% endif %}
}
{% endif %}
{% endfor %}
