---

pqcrypto_version: 0.14.2
traits_version: 0.3.2

kems:
  kyber:
    version: 0.7.2
    avx2_guard: 'avx2_enabled && !is_windows && !is_macos && target_arch == "x86_64"'
    schemes:
      - name: kyber512
        implementation: clean
        avx2_implementation: avx2
      - name: kyber768
        implementation: clean
        avx2_implementation: avx2
      - name: kyber1024
        implementation: clean
        avx2_implementation: avx2
      - name: kyber512-90s
        implementation: clean
        avx2_implementation: avx2
      - name: kyber768-90s
        implementation: clean
        avx2_implementation: avx2
      - name: kyber1024-90s
        implementation: clean
        avx2_implementation: avx2
  frodo:
    version: 0.4.8
    notes: |
      If you use it via the FFI interface: The ``clean`` implementation of Frodo
      needs a lot of stack space, specify env variable `RUST_MIN_STACK` to make
      sure it has enough stack space in threads.

      This is not relevant for the 'normal' api methods.
    schemes:
      - name: frodokem640aes
        implementation: opt
        alt_implementations:
          - clean
      - name: frodokem640shake
        implementation: opt
        alt_implementations:
          - clean
      - name: frodokem976aes
        implementation: opt
        alt_implementations:
          - clean
      - name: frodokem976shake
        implementation: opt
        alt_implementations:
          - clean
      - name: frodokem1344aes
        implementation: opt
        alt_implementations:
          - clean
      - name: frodokem1344shake
        implementation: opt
        alt_implementations:
          - clean
  ntru:
    version: 0.5.5
    schemes:
      - name: ntruhps2048509
        implementation: clean
        avx2_implementation: avx2
      - name: ntruhps2048677
        implementation: clean
        avx2_implementation: avx2
      - name: ntruhps4096821
        implementation: clean
        avx2_implementation: avx2
      - name: ntruhrss701
        implementation: clean
        avx2_implementation: avx2
  ntruprime:
    version: 0.1.3
    schemes:
      - name: ntrulpr653
        implementation: clean
        avx2_implementation: avx2
      - name: ntrulpr761
        implementation: clean
        avx2_implementation: avx2
      - name: ntrulpr857
        implementation: clean
        avx2_implementation: avx2
      - name: sntrup653
        implementation: clean
        avx2_implementation: avx2
      - name: sntrup761
        implementation: clean
        avx2_implementation: avx2
      - name: sntrup857
        implementation: clean
        avx2_implementation: avx2
  saber:
    version: 0.1.8
    schemes:
      - name: firesaber
        implementation: clean
        avx2_implementation: avx2
      - name: lightsaber
        implementation: clean
        avx2_implementation: avx2
      - name: saber
        implementation: clean
        avx2_implementation: avx2
  classicmceliece:
    version: 0.1.4
    notes: |
      This implementation requires a lot of stack space.
      You need to specify ``RUST_MIN_STACK=800000000``, probably.
    avx2_guard: 'avx2_enabled && !is_windows && target_arch == "x86_64"'
    schemes:
      - name: mceliece348864
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece348864f
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece460896
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece460896f
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece6688128
        doctest: no
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece6688128f
        doctest: no
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece6960119
        doctest: no
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece6960119f
        doctest: no
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece8192128
        doctest: no
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
      - name: mceliece8192128f
        doctest: no
        implementation: vec
        avx2_implementation: avx
        alt_implementations:
          - clean
  hqc:
    version: 0.1.2
    schemes:
      - name: hqc-rmrs-128
        implementation: clean
        #avx2_implementation: avx2
      - name: hqc-rmrs-192
        implementation: clean
        #avx2_implementation: avx2
      - name: hqc-rmrs-256
        implementation: clean
        #avx2_implementation: avx2


signs:
  dilithium:
    version: 0.4.2
    avx2_guard: 'avx2_enabled && !is_windows && target_arch == "x86_64"'
    schemes:
      - name: dilithium2
        implementation: clean
        avx2_implementation: avx2
      - name: dilithium3
        implementation: clean
        avx2_implementation: avx2
      - name: dilithium5
        implementation: clean
        avx2_implementation: avx2
  falcon:
    version: 0.2.8
    schemes:
      - name: falcon-512
        implementation: clean
        avx2_implementation: avx2
      - name: falcon-1024
        implementation: clean
        avx2_implementation: avx2
  rainbow:
    version: 0.2.2
    notes: |
      This implementation requires a lot of stack space.
      You need to specify ``RUST_MIN_STACK=800000000``, probably.
    schemes:
      - name: rainbowI-circumzenithal
        implementation: clean
      - name: rainbowI-classic
        implementation: clean
      - name: rainbowI-compressed
        implementation: clean
      - name: rainbowIII-circumzenithal
        implementation: clean
      - name: rainbowIII-classic
        implementation: clean
      - name: rainbowIII-compressed
        implementation: clean
      - name: rainbowV-circumzenithal
        doctest: no # Doc test fail because of too small stack size
        implementation: clean
      - name: rainbowV-classic
        doctest: no # Doc test fail because of too small stack size
        implementation: clean
      - name: rainbowV-compressed
        doctest: no # Doc test fail because of too small stack size
        implementation: clean
  sphincsplus:
    version: 0.6.1
    schemes:
      - name: sphincs-haraka-128f-robust
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-128f-simple
        avx2_implementation: aesni
        avx2_feature: 'aes'
        implementation: clean
      - name: sphincs-haraka-128s-robust
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-128s-simple
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-192f-robust
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-192f-simple
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-192s-robust
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-192s-simple
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-256f-robust
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-256f-simple
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-256s-robust
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-haraka-256s-simple
        implementation: clean
        avx2_implementation: aesni
        avx2_feature: 'aes'
      - name: sphincs-shake256-128f-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-128f-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-128s-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-128s-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-192f-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-192f-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-192s-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-192s-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-256f-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-256f-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-256s-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-shake256-256s-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-128f-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-128f-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-128s-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-128s-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-192f-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-192f-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-192s-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-192s-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-256f-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-256f-simple
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-256s-robust
        implementation: clean
        avx2_implementation: avx2
      - name: sphincs-sha256-256s-simple
        implementation: clean
        avx2_implementation: avx2

#  vim: set ft=yaml ts=2 sw=2 tw=0 et :
